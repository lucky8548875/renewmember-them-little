{"remainingRequest":"/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/node_modules/thread-loader/dist/cjs.js!/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/node_modules/babel-loader/lib/index.js!/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/src/store.js","dependencies":[{"path":"/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/src/store.js","mtime":1549111162582},{"path":"/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/lucky8548875/SJ Raymundo (2TB)/Documents/Shame/remember-them-little-pwa/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport firebase from './firebase';\nimport axios from 'axios';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    user: {},\n    authLoadingStatus: 'NOT_LOADING',\n    account_type: '',\n    account_name: \"\",\n    // Admin\n    bookings: [],\n    orders: [],\n    users: [],\n    categories: [],\n    packages: [],\n    themes: [],\n    addons: [],\n    inclusions: [],\n    weekBookings: \"\",\n    blockedDates: [],\n    blockedDays: [],\n    // User\n    myBookings: [],\n    myOrders: [],\n    notifications: [],\n    // Booking\n    selectedCategoryId: -1,\n    selectedPackageId: -1,\n    booking: {\n      package: {},\n      addons: [],\n      // For selected package only\n      theme_ids: [],\n      booking_date: \"\",\n      booking_time: \"\",\n      subject_name: \"\",\n      subject_age: \"\",\n      payment_method: \"BANK_DEPOSIT\"\n    },\n    loadArray: [],\n    userId: null\n  },\n  getters: {\n    loadArrayHasContent: function loadArrayHasContent(state) {\n      return state.loadArray.length > 0;\n    },\n    isAuthenticated: function isAuthenticated(state) {\n      return Object.keys(state.user).length != 0;\n    },\n    isAdmin: function isAdmin(state) {\n      if (state.account_type == 'ADMIN') return true; // else if(state.account_type == 'USER' || state.account_type == 'MOD') return false\n      else return localStorage.getItem('account_type') == 'ADMIN';\n    },\n    isUser: function isUser(state) {\n      if (state.account_type == 'USER') return true; // else if(state.account_type == 'ADMIN' || state.account_type == 'MOD') return false\n      else return localStorage.getItem('account_type') == 'USER';\n    },\n    isModerator: function isModerator(state) {\n      if (state.account_type == 'MOD') return true; // else if(state.account_type == 'ADMIN' || state.account_type == 'USER') return false\n      else return localStorage.getItem('account_type') == 'MOD';\n    },\n    isBlocked: function isBlocked(state) {\n      if (state.account_type == 'BLOCKED') return true; // else if(state.account_type == 'ADMIN' || state.account_type == 'USER'|| state.account_type == 'MOD') return false\n      else return localStorage.getItem('account_type') == 'BLOCKED';\n    },\n    getAccessLevel: function getAccessLevel(state) {\n      if (state.account_type == 'ADMIN' || localStorage.getItem('account_type') == 'ADMIN') return 3;\n      if (state.account_type == 'MOD' || localStorage.getItem('account_type') == 'MOD') return 2;\n      if (state.account_type == 'USER' || localStorage.getItem('account_type') == 'USER') return 1;\n      if (state.account_type == 'BLOCKED' || localStorage.getItem('account_type') == 'BLOCKED') return 0;\n      return 0;\n    },\n    allBookings: function allBookings(state) {\n      return state.bookings;\n    },\n    allOrders: function allOrders(state) {\n      return state.orders;\n    },\n    allUsers: function allUsers(state) {\n      return state.users;\n    },\n    userId: function userId(state) {\n      if (state.userId != null) return state.userId;\n      return localStorage.getItem('userId');\n    },\n    myBookings: function myBookings(state) {\n      return state.myBookings;\n    },\n    myOrders: function myOrders(state) {\n      return state.myOrders;\n    },\n    categories: function categories(state) {\n      return state.categories;\n    },\n    packages: function packages(state) {\n      return state.packages;\n    },\n    themes: function themes(state) {\n      return state.themes;\n    },\n    addons: function addons(state) {\n      return state.addons;\n    },\n    inclusions: function inclusions(state) {\n      return state.inclusions;\n    },\n    notifications: function notifications(state) {\n      return state.notifications;\n    },\n    weekBookings: function weekBookings(state) {\n      return state.weekBookings;\n    },\n    blockedDates: function blockedDates(state) {\n      return state.blockedDates;\n    },\n    blockedDays: function blockedDays(state) {\n      return state.blockedDays;\n    },\n    // Book\n    selectedCategoryId: function selectedCategoryId(state) {\n      return state.selectedCategoryId;\n    },\n    selectedPackageId: function selectedPackageId(state) {\n      return state.selectedPackageId;\n    },\n    booking: function booking(state) {\n      return state.booking;\n    },\n    bookingSlots: function bookingSlots(state) {\n      var formData = new FormData();\n      formData.append(\"booking_date\", state.booking.booking_date);\n      formData.append(\"package_minutes\", state.booking.package.package_minutes);\n      axios.post(\"/_system/php/api/booking/getOpenSlots.php\", formData).then(function (response) {\n        if (response.data.success) {\n          return response.data.data;\n        } else {\n          console.error(response);\n          return [];\n        }\n      }).catch(function (error) {\n        console.log(error);\n        return [];\n      });\n    },\n    getBookingTotalPrice: function getBookingTotalPrice(state) {\n      var package_price = state.booking.package.package_price;\n      var addons_price = 0;\n\n      for (var x in state.booking.addons) {\n        addons_price += state.booking.addons[x].addon_price;\n      }\n\n      return package_price + addons_price;\n    }\n  },\n  mutations: {\n    setAuthLoadingStatus: function setAuthLoadingStatus(state, status) {\n      state.authLoadingStatus = status;\n    },\n    setUser: function setUser(state, user) {\n      state.user = user;\n    },\n    setSelfAccountType: function setSelfAccountType(state, account_type) {\n      state.account_type = account_type;\n      localStorage.setItem('account_type', account_type);\n    },\n    // Admin\n    setBookings: function setBookings(state, bookings) {\n      state.bookings = bookings;\n    },\n    setOrders: function setOrders(state, orders) {\n      state.orders = orders;\n    },\n    setUsers: function setUsers(state, users) {\n      state.users = users;\n    },\n    setCategories: function setCategories(state, categories) {\n      state.categories = categories;\n    },\n    setPackages: function setPackages(state, packages) {\n      state.packages = packages;\n    },\n    setThemes: function setThemes(state, themes) {\n      state.themes = themes;\n    },\n    setAddons: function setAddons(state, addons) {\n      state.addons = addons;\n    },\n    setInclusions: function setInclusions(state, inclusions) {\n      state.inclusions = inclusions;\n    },\n    spliceTheme: function spliceTheme(state, theme_index) {\n      state.booking.theme_ids.splice(theme_index, 1);\n    },\n    pushTheme: function pushTheme(state, theme_id) {\n      state.booking.theme_ids.push(theme_id);\n    },\n    setWeekBookings: function setWeekBookings(state, weekBookings) {\n      state.weekBookings = weekBookings;\n    },\n    // User\n    setMyBookings: function setMyBookings(state, bookings) {\n      state.myBookings = bookings;\n    },\n    setMyOrders: function setMyOrders(state, orders) {\n      state.myOrders = orders;\n    },\n    setSelfAccountId: function setSelfAccountId(state, userId) {\n      console.log('::SET SELF ACCOUNT ID::');\n      console.log('::SET userId on localstorage...');\n      localStorage.setItem('userId', userId);\n      console.log('::SET userId on localstorage...DONE');\n      console.log('::SET userId on state...');\n      state.userId = userId;\n      console.log('::SET userId on state... should be done..check manually');\n    },\n    setNotifications: function setNotifications(state, notifications) {\n      state.notifications = notifications;\n    },\n    // Book\n    setSelectedCategoryId: function setSelectedCategoryId(state, category_id) {\n      state.selectedCategoryId = category_id;\n    },\n    setBookingPackage: function setBookingPackage(state, packagex) {\n      state.booking.package = packagex;\n    },\n    setSelectedPackageId: function setSelectedPackageId(state, package_id) {\n      state.selectedPackageId = package_id;\n    },\n    setBookingAddons: function setBookingAddons(state, addons) {\n      state.booking.addons = addons;\n    },\n    addBookingAddon: function addBookingAddon(state, addon) {\n      state.booking.addons.push(addon);\n    },\n    spliceBookingAddon: function spliceBookingAddon(state, index) {\n      state.booking.addons.splice(index, 1);\n    },\n    upgradePrint: function upgradePrint(state, index) {\n      state.booking.addons[index].addon_description = 'Upgraded to 12x16';\n      state.booking.addons[index].addon_price = 250;\n    },\n    unupgradePrint: function unupgradePrint(state, index) {\n      state.booking.addons[index].addon_description = '8x10';\n      state.booking.addons[index].addon_price = 0;\n    },\n    setBookingDate: function setBookingDate(state, date) {\n      state.booking.booking_date = date;\n    },\n    setBookingTime: function setBookingTime(state, time) {\n      state.booking.booking_time = time;\n    },\n    setBlockedDates: function setBlockedDates(state, dates) {\n      state.blockedDates = dates;\n    },\n    setBlockedDays: function setBlockedDays(state, days) {\n      state.blockedDays = days;\n    },\n    addLoadArray: function addLoadArray(state, detail) {\n      state.loadArray.push(detail);\n    },\n    popLoadArray: function popLoadArray(state, detail) {\n      console.log('::POP-LOAD-ARRAY::');\n      console.log('Current state: ' + state.loadArray);\n      console.log('Trying to remove: ' + detail);\n      console.log(state.loadArray + \".splice(\" + state.loadArray.indexOf(detail) + \",1)\");\n      state.loadArray.splice(state.loadArray.indexOf(detail), 1);\n    }\n  },\n  actions: {\n    smsSignIn: function smsSignIn(context, phone) {\n      context.commit('addLoadArray', 'reCaptcha');\n      console.log(\"Called smsSignIn\");\n      firebase.auth().useDeviceLanguage();\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('sms-sign-in', {\n        'size': 'invisible',\n        'callback': function callback(response) {\n          // reCAPTCHA solved, allow signInWithPhoneNumber.\n          console.log(\"Captcha solved! :)\");\n          context.commit('popLoadArray', 'reCaptcha'); // var phoneNumber = getPhoneNumberFromUserInput();\n        }\n      });\n      console.log(\"Sending code to phone...\");\n      context.commit('addLoadArray', 'sendCodeToPhone');\n      var phoneNumber = phone;\n      var appVerifier = window.recaptchaVerifier;\n      firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier).then(function (confirmationResult) {\n        console.log(\"SMS Sent! Prompt user to type code\");\n        context.commit('popLoadArray', 'sendCodeToPhone'); // TESTING\n        // SMS sent. Prompt user to type the code from the message, then sign the\n        // user in with confirmationResult.confirm(code).\n\n        window.confirmationResult = confirmationResult;\n      }).catch(function (error) {\n        context.commit('popLoadArray', 'sendCodeToPhone');\n        console.error(\"Oops.. Can't Send SMS :( Reason: \" + error); // Error; SMS not sent\n        // ...\n\n        grecaptcha.reset(window.recaptchaWidgetId); // Or, if you haven't stored the widget ID:\n\n        window.recaptchaVerifier.render().then(function (widgetId) {\n          grecaptcha.reset(widgetId);\n        });\n      });\n    },\n    smsSignInCheckCode: function smsSignInCheckCode(context, code) {\n      // var code = getCodeFromUserInput();\n      context.commit('addLoadArray', 'checkCode');\n      var code = code;\n      confirmationResult.confirm(code).then(function (result) {\n        // User signed in successfully.\n        context.commit('popLoadArray', 'checkCode');\n        var user = result.user;\n        console.log('Signed in with sms. Action: check record in php'); // ...\n      }).catch(function (error) {\n        // User couldn't sign in (bad verification code?)\n        context.commit('popLoadArray', 'checkCode');\n        console.log('Oops.. Wrong code'); // ...\n      });\n    },\n    facebookSignIn: function facebookSignIn(context) {\n      console.log('starting facebook sign in...');\n      var provider = new firebase.auth.FacebookAuthProvider();\n      firebase.auth().signInWithPopup(provider).then(function (result) {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        // var token = result.credential.accessToken;\n        // The signed-in user info.\n        // var user = result.user;\n        console.log('Success fb sign in!'); // ...\n      }).catch(function (error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message; // The email of the user's account used.\n\n        var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n        var credential = error.credential; // ...\n\n        console.log(errorMessage);\n      });\n    },\n    signOut: function signOut(context) {\n      firebase.auth().signOut().then(function () {\n        console.log(\"success\");\n        context.commit(\"setUser\", {});\n        localStorage.removeItem('account_type');\n        localStorage.removeItem('userId');\n        context.state.account_type = '';\n      }, function (error) {\n        console.log(error);\n      });\n    },\n    loadCurrentUser: function loadCurrentUser(context) {\n      if (context.getters.userId != null) {\n        context.dispatch('loadNotifications');\n      }\n\n      console.log('called loadCurrentUser');\n      context.commit('setAuthLoadingStatus', 'LOADING');\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          context.commit('setAuthLoadingStatus', 'NOT_LOADING');\n          context.commit('setUser', user);\n\n          if (user.providerData[0].providerId == 'phone') {\n            axios.get(\"/_system/php/api/account/signIn.php?firebase_id=\".concat(user.uid, \"&phone_number=\").concat(user.providerData[0].phoneNumber)).then(function (response) {\n              // handle success\n              console.log('Account connected to database');\n              console.log(response);\n              context.state.account_name = response.data.data.display_name;\n              context.commit('setSelfAccountType', response.data.data.account_type);\n              console.log('setting account id to ' + response.data.data.account_id);\n              context.commit('setSelfAccountId', response.data.data.account_id);\n            }).catch(function (error) {\n              // handle error\n              console.log(error);\n            });\n          } else if (user.providerData[0].providerId == 'facebook.com') {\n            axios.get(\"/_system/php/api/account/signIn.php?firebase_id=\".concat(user.uid, \"&facebook_id=\").concat(user.providerData[0].uid, \"&facebook_name=\").concat(user.displayName)).then(function (response) {\n              // handle success\n              console.log('Account connected to database');\n              console.log(response);\n              context.state.account_name = response.data.data.display_name;\n              context.commit('setSelfAccountType', response.data.data.account_type);\n              console.log('setting account id to ' + response.data.data.account_id);\n              context.commit('setSelfAccountId', response.data.data.account_id);\n            }).catch(function (error) {\n              // handle error\n              console.log(error);\n            });\n          }\n        } else {\n          context.commit('setAuthLoadingStatus', 'NOT_LOADING');\n          console.log('No User');\n        }\n      });\n    },\n    // Admin\n    getAllBookings: function getAllBookings(context) {\n      context.commit('addLoadArray', 'getAllBookings');\n      console.log('store: called getAllBookings');\n      axios.get('/_system/php/api/booking/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        console.log('Should pop getAllBookings, currently ' + context.state.loadArray);\n        context.commit('setBookings', response.data.data);\n        context.commit('popLoadArray', 'getAllBookings');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'getAllBookings');\n      });\n    },\n    getAllOrders: function getAllOrders(context) {\n      context.commit('addLoadArray', 'getAllOrders');\n      console.log('store: called getAllOrders');\n      axios.get('/_system/php/api/orders/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setOrders', response.data.data);\n        context.commit('popLoadArray', 'getAllOrders');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'getAllOrders');\n      });\n    },\n    approveBooking: function approveBooking(context, bookingId) {\n      context.commit('addLoadArray', 'approveBooking');\n      console.log(\"approve Booking clicked \" + bookingId);\n      var formdata = new FormData();\n      formdata.append('booking_id', bookingId);\n      formdata.append('account_id', context.getters.userId);\n      console.log(context.getters.userId);\n      axios.post('/_system/php/api/booking/approveBooking.php', formdata).then(function (response) {\n        // handle success\n        context.commit('popLoadArray', 'approveBooking');\n        context.dispatch('getAllBookings');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'approveBooking');\n        console.log(error);\n      });\n    },\n    getAllUsers: function getAllUsers(context) {\n      context.commit('addLoadArray', 'getAllUsers');\n      console.log('store: called getAllUsers');\n      axios.get('/_system/php/api/users/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setUsers', response.data.data);\n        context.commit('popLoadArray', 'getAllUsers');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'getAllUsers');\n      });\n    },\n    getUserBookings: function getUserBookings(context, userId) {\n      context.commit('addLoadArray', 'getUserBookings');\n      console.log('store: called getUserBookings');\n      axios.get(\"/_system/php/api/booking/getUserBookings.php?account_id=\".concat(userId)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setMyBookings', response.data.data);\n        context.commit('popLoadArray', 'getUserBookings');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'getUserBookings');\n        console.log(error);\n      });\n    },\n    getUserOrders: function getUserOrders(context) {\n      context.commit('addLoadArray', 'getUserOrders');\n      console.log('store: called getUserOrders');\n      var userId = context.getters.userId;\n      axios.get(\"/_system/php/api/orders/getUserOrders.php?account_id=\".concat(userId)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setMyOrders', response.data.data);\n        context.commit('popLoadArray', 'getUserOrders');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'getUserOrders');\n        console.log(error);\n      });\n    },\n    loadCategories: function loadCategories(context) {\n      context.commit('addLoadArray', 'loadCategories');\n      console.log('store: called loadCategories');\n      axios.get('/_system/php/api/category/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setCategories', response.data.data);\n        context.commit('popLoadArray', 'loadCategories');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'loadCategories');\n      });\n    },\n    loadPackages: function loadPackages(context) {\n      context.commit('addLoadArray', 'loadPackages');\n      console.log('store: called loadPackages');\n      axios.get('/_system/php/api/package/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setPackages', response.data.data);\n        context.commit('popLoadArray', 'loadPackages');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'loadPackages');\n        console.log(error);\n      });\n    },\n    loadAddons: function loadAddons(context) {\n      context.commit('addLoadArray', 'loadAddons');\n      console.log('store: called loadAddons');\n      axios.get('/_system/php/api/addon/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setAddons', response.data.data);\n        context.commit('popLoadArray', 'loadAddons');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'loadAddons');\n        console.log(error);\n      });\n    },\n    loadInclusions: function loadInclusions(context) {\n      context.commit('addLoadArray', 'loadInclusions');\n      console.log('store: called loadInclusions');\n      axios.get('/_system/php/api/package/getInclusions.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('popLoadArray', 'loadInclusions');\n        context.commit('setInclusions', response.data.data);\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'loadInclusions');\n        console.log(error);\n      });\n    },\n    loadThemes: function loadThemes(context) {\n      context.commit('addLoadArray', 'loadThemes');\n      console.log('store: called loadThemes');\n      axios.get('/_system/php/api/theme/getAll.php').then(function (response) {\n        // handle success\n        console.log(response);\n        context.commit('setThemes', response.data.data);\n        context.commit('popLoadArray', 'loadThemes');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'loadThemes');\n      });\n    },\n    submitPayment: function submitPayment(context, formdata) {\n      context.commit('addLoadArray', 'submitPayment');\n      console.log('store: called submitPayment');\n      axios.post('/_system/php/api/booking/addDepositSlip.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('getUserBookings', context.getters.userId);\n        context.commit('popLoadArray', 'submitPayment');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'submitPayment');\n        console.log(error);\n      });\n    },\n    editCategory: function editCategory(context, formdata) {\n      context.commit('addLoadArray', 'editCategory');\n      console.log('store: called editCategory');\n      axios.post('/_system/php/api/category/update.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadCategories');\n        context.commit('popLoadArray', 'editCategory');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'editCategory');\n        console.log(error);\n      });\n    },\n    addCategory: function addCategory(context, formdata) {\n      context.commit('addLoadArray', 'addCategory');\n      console.log('store: called addCategory');\n      axios.post('/_system/php/api/category/add.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadCategories');\n        context.commit('popLoadArray', 'addCategory');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'addCategory');\n      });\n    },\n    deleteCategory: function deleteCategory(context, category_id) {\n      context.commit('addLoadArray', 'deleteCategory');\n      console.log('store: called deleteCategory');\n      axios.post(\"/_system/php/api/category/delete.php?category_id=\".concat(category_id)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadCategories');\n        context.commit('popLoadArray', 'deleteCategory');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'deleteCategory');\n      });\n    },\n    addPackage: function addPackage(context, formdata) {\n      context.commit('addLoadArray', 'addPackage');\n      console.log('store: called addPackage');\n      axios.post('/_system/php/api/package/add.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadPackages');\n        context.dispatch('loadInclusions');\n        context.commit('popLoadArray', 'addPackage');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'addPackage');\n        console.log(error);\n      });\n    },\n    editPackage: function editPackage(context, formdata) {\n      context.commit('addLoadArray', 'editPackage');\n      console.log('store: called editPackage');\n      axios.post('/_system/php/api/package/update.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadPackages');\n        context.dispatch('loadInclusions');\n        context.commit('popLoadArray', 'editPackage');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'editPackage');\n        console.log(error);\n      });\n    },\n    deletePackage: function deletePackage(context, package_id) {\n      context.commit('addLoadArray', 'deletePackage');\n      console.log('store: called deletePackage');\n      axios.post(\"/_system/php/api/package/delete.php?package_id=\".concat(package_id)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadPackages');\n        context.dispatch('loadInclusions');\n        context.commit('popLoadArray', 'deletePackage');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'deletePackage');\n      });\n    },\n    addAddon: function addAddon(context, formdata) {\n      context.commit('addLoadArray', 'addAddon');\n      console.log('store: called addAddon');\n      axios.post('/_system/php/api/addon/add.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadAddons');\n        context.commit('popLoadArray', 'addAddon');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'addAddon');\n        console.log(error);\n      });\n    },\n    editAddon: function editAddon(context, formdata) {\n      context.commit('addLoadArray', 'editAddon');\n      console.log('store: called editAddon');\n      axios.post('/_system/php/api/addon/update.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadAddons');\n        context.commit('popLoadArray', 'editAddon');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'editAddon');\n      });\n    },\n    deleteAddon: function deleteAddon(context, addon_id) {\n      context.commit('addLoadArray', 'deleteAddon');\n      console.log('store: called deleteAddon');\n      axios.post(\"/_system/php/api/addon/delete.php?addon_id=\".concat(addon_id)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadAddons');\n        context.commit('popLoadArray', 'deleteAddon');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'deleteAddon');\n      });\n    },\n    addTheme: function addTheme(context, formdata) {\n      context.commit('addLoadArray', 'addTheme');\n      console.log('store: called addTheme');\n      axios.post('/_system/php/api/theme/add.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadThemes');\n        context.commit('popLoadArray', 'addTheme');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'addTheme');\n        console.log(error);\n      });\n    },\n    editTheme: function editTheme(context, formdata) {\n      context.commit('addLoadArray', 'editTheme');\n      console.log('store: called editTheme');\n      axios.post('/_system/php/api/theme/update.php', formdata).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadThemes');\n        context.commit('popLoadArray', 'editTheme');\n      }).catch(function (error) {\n        // handle error\n        context.commit('popLoadArray', 'editTheme');\n        console.log(error);\n      });\n    },\n    deleteTheme: function deleteTheme(context, theme_id) {\n      context.commit('addLoadArray', 'deleteTheme');\n      console.log('store: called deleteTheme');\n      axios.post(\"/_system/php/api/theme/delete.php?theme_id=\".concat(theme_id)).then(function (response) {\n        // handle success\n        console.log(response);\n        context.dispatch('loadThemes');\n        context.commit('popLoadArray', 'deleteTheme');\n      }).catch(function (error) {\n        // handle error\n        console.log(error);\n        context.commit('popLoadArray', 'deleteTheme');\n      });\n    },\n    loadNotifications: function loadNotifications(context) {\n      console.log('Load Notifications of....' + context.getters.userId);\n      axios.get(\"/_system/php/api/notification/getUserNotifications.php?account_id=\".concat(context.getters.userId)).then(function (response) {\n        context.commit('setNotifications', response.data.data);\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    markAsRead: function markAsRead(context, notification_id) {\n      axios.post(\"/_system/php/api/notification/markAsRead.php?notification_id=\".concat(notification_id)).then(function (response) {\n        context.dispatch('loadNotifications');\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    setBookingPackage: function setBookingPackage(context, packagex) {\n      context.commit('setBookingPackage', packagex);\n      context.commit('setSelectedPackageId', packagex.package_id);\n    },\n    preparetheme: function preparetheme(context, id) {\n      if (context.getters.booking.theme_ids.includes(id)) {\n        var index = context.getters.booking.theme_ids.indexOf(id); //\n\n        context.commit('spliceTheme', index);\n      } else if (context.getters.booking.theme_ids.length < context.getters.booking.package.package_themes) {\n        context.commit('pushTheme', id);\n      }\n    },\n    cancelBooking: function cancelBooking(context, id) {\n      context.commit('addLoadArray', 'cancelBooking');\n      var formdata = new FormData();\n      formdata.append('booking_id', id);\n      formdata.append('account_id', context.getters.userId);\n      console.log(context.getters.userId);\n      axios.post('/_system/php/api/booking/cancelBooking.php', formdata).then(function (response) {\n        if (response.data.success) {\n          context.dispatch('getAllBookings');\n          context.commit('popLoadArray', 'cancelBooking');\n        } else {\n          console.log(response.data.message);\n          context.commit('popLoadArray', 'cancelBooking');\n        }\n      }).catch(function (error) {\n        cosnole.error('failed to cancel booking: ' + error);\n      });\n    },\n    markAsCompleted: function markAsCompleted(context, booking_id) {\n      context.commit('addLoadArray', 'markAsCompleted');\n      var formdata = new FormData();\n      formdata.append('booking_id', booking_id);\n      formdata.append('account_id', context.getters.userId);\n      console.log(context.getters.userId);\n      axios.post('/_system/php/api/booking/completeBooking.php', formdata).then(function (response) {\n        if (response.data.success) {\n          context.dispatch('getAllBookings');\n          context.commit('popLoadArray', 'markAsCompleted');\n        } else {\n          console.log(response.data.message);\n          context.commit('popLoadArray', 'markAsCompleted');\n        }\n      }).catch(function (error) {\n        cosnole.error('failed to mark booking as done: ' + error);\n      });\n    },\n    book: function book(context) {\n      context.commit('addLoadArray', 'book');\n      var formData = new FormData();\n      formData.append('package', JSON.stringify(context.getters.booking.package));\n      formData.append('booking_addons', JSON.stringify(context.getters.booking.addons));\n      formData.append('booking_themes', JSON.stringify(context.getters.booking.theme_ids));\n      formData.append('booking_date', context.getters.booking.booking_date);\n      formData.append('booking_time', context.getters.booking.booking_time);\n      formData.append('subject_name', context.getters.booking.subject_name);\n      formData.append('subject_age', context.getters.booking.subject_age);\n      formData.append('account_id', context.getters.userId); // formData.append('token', context.getters.account.token);\n\n      formData.append('payment_method', context.getters.booking.payment_method);\n      formData.append('booking_total_price', context.getters.getBookingTotalPrice);\n      axios.post('/_system/php/api/booking/add.php', formData).then(function (response) {\n        if (response.data.success) {\n          console.log(response.data);\n          context.commit('popLoadArray', 'book');\n        } else console.error(response.data.message);\n\n        context.commit('popLoadArray', 'book');\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    placeOrder: function placeOrder(context, submitEvent) {\n      context.commit('addLoadArray', 'placeOrder');\n      var elements = [];\n\n      for (var key in submitEvent.target.elements) {\n        if (submitEvent.target.elements[key].type == 'text') elements.push(submitEvent.target.elements[key]);\n      }\n\n      var order_list = elements.map(function (element) {\n        return {\n          filename: element.value,\n          addon: JSON.parse(element.attributes.addon.nodeValue)\n        };\n      });\n      var formData = new FormData();\n      formData.append('order_list', JSON.stringify(order_list));\n      formData.append('account_id', context.getters.userId);\n      formData.append('booking_id', submitEvent.target.elements.booking_id.value);\n      axios.post('/_system/php/api/orders/add.php', formData).then(function (response) {\n        console.log(response);\n        context.dispatch('getUserOrders');\n        context.commit('popLoadArray', 'placeOrder');\n      }).catch(function (error) {\n        console.error(error);\n        context.commit('popLoadArray', 'placeOrder');\n      });\n    },\n    cancelOrder: function cancelOrder(context, orderId) {},\n    notifyForPickup: function notifyForPickup(context, ids) {\n      context.commit('addLoadArray', 'notifyForPickup');\n      console.log('called notifyForPickup');\n      var formData = new FormData();\n      formData.append('order_id', ids.order_id);\n      formData.append('account_id', ids.account_id);\n      axios.post('/_system/php/api/orders/notifyForPickup.php', formData).then(function (response) {\n        context.dispatch('getAllOrders');\n        context.commit('popLoadArray', 'notifyForPickup');\n      }).catch(function (error) {\n        console.error(error);\n        context.commit('popLoadArray', 'notifyForPickup');\n      });\n    },\n    markAsReleased: function markAsReleased(context, ids) {\n      context.commit('addLoadArray', 'markAsReleased');\n      console.log('called markAsReleased');\n      var formData = new FormData();\n      formData.append('order_id', ids.order_id);\n      formData.append('account_id', ids.account_id);\n      axios.post('/_system/php/api/orders/markAsReleased.php', formData).then(function (response) {\n        console.log(response);\n        context.dispatch('getAllOrders');\n        context.commit('popLoadArray', 'markAsReleased');\n      }).catch(function (error) {\n        console.error(error);\n        context.commit('popLoadArray', 'markAsReleased');\n      });\n    },\n    loadWeekBookings: function loadWeekBookings(context) {\n      context.commit('addLoadArray', 'loadWeekBookings');\n      console.log('calledLoadWeekBookings');\n      axios.get(\"/_system/php/api/booking/getByWeek.php?from_date=\".concat(new Date().getFullYear() + '-' + (new Date().getMonth() + 1 < 10 ? '0' : '') + (new Date().getMonth() + 1) + '-' + (new Date().getDate() + 1 < 10 ? '0' : '') + new Date().getDate())).then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.commit('setWeekBookings', JSON.stringify(response.data));\n        context.commit('popLoadArray', 'loadWeekBookings');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'loadWeekBookings');\n      });\n    },\n    blockDate: function blockDate(context, date_value) {\n      context.commit('addLoadArray', 'blockDate');\n      console.log('called blockDate');\n      axios.get(\"/_system/php/api/booking/blockDate.php?date=\".concat(date_value)).then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.dispatch('loadBlockedDates');\n        context.commit('popLoadArray', 'blockeDate');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'blockeddate');\n      });\n    },\n    loadBlockedDates: function loadBlockedDates(context) {\n      context.commit('addLoadArray', 'loadBlockedDates');\n      console.log('called loadBlockedDates');\n      axios.get(\"/_system/php/api/booking/loadBlockedDates.php\").then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.commit('setBlockedDates', response.data.data);\n        context.commit('popLoadArray', 'loadBlockedDates');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'loadBlockedDates');\n      });\n    },\n    removeBlockedDate: function removeBlockedDate(context, date_id) {\n      context.commit('addLoadArray', 'removeBlockedDate');\n      console.log('called removeBlockedDate');\n      axios.get(\"/_system/php/api/booking/removeBlockedDate.php?date_id=\".concat(date_id)).then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.dispatch('loadBlockedDates');\n        context.commit('popLoadArray', 'removeBlockedDates');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'removeBlockedDates');\n      });\n    },\n    loadBlockedDays: function loadBlockedDays(context) {\n      context.commit('addLoadArray', 'loadBlockedDays');\n      console.log('called loadBlockedDays');\n      axios.get(\"/_system/php/functions/loadConfig.php?config_key=blocked_days\").then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.commit('setBlockedDays', JSON.parse(response.data.data.config_value));\n        context.commit('popLoadArray', 'loadBlockedDays');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'loadBlockedDays');\n      });\n    },\n    saveBlockedDays: function saveBlockedDays(context, value) {\n      context.commit('addLoadArray', 'saveBlockedDays');\n      console.log('called saveBlockedDays');\n      axios.get(\"/_system/php/functions/setConfig.php?config_key=blocked_days&config_value=\".concat(value)).then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.dispatch('loadBlockedDays');\n        context.commit('popLoadArray', 'saveBlockedDays');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'saveBlockedDays');\n      });\n    },\n    changeAccountType: function changeAccountType(context, accountobj) {\n      context.commit('addLoadArray', 'changeAccountType');\n      console.log('called changeAccountType of ' + accountobj.account_id + \" to \" + accountobj.account_type);\n      var formData = new FormData();\n      formData.append('account_id', accountobj.account_id);\n      formData.append('account_type', accountobj.account_type);\n      axios.post(\"/_system/php/api/account/changeAccountType.php\", formData).then(function (response) {\n        console.log('response: ' + JSON.stringify(response.data));\n        context.dispatch('getAllUsers');\n        context.commit('popLoadArray', 'changeAccountType');\n      }).catch(function (error) {\n        console.log(error);\n        context.commit('popLoadArray', 'changeAccountType');\n      });\n    }\n  }\n});",null]}